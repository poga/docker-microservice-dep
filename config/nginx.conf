{{range .EnvVar -}}
env {{.}};
{{end -}}
worker_processes 1;
error_log /dev/stdout;
error_log logs/error.log;
pid logs/nginx.pid;
daemon off;

events {
    worker_connections 1024;
}

http {
    upstream append_log_proxy {
        server localhost:{{.WriteProxyPort}};
    }

    client_max_body_size 20M;

    # utilize nginx built-in request time calculation
    # use nginx's cached timestamp so no syscall required
    # NOTE: shows 0.0 if request_time < 1ms
    log_format trace_log '[$status] ["$time_local" $msec] '
        '$request_method $uri $body_bytes_sent $func_name '
        '@$request_time $upstream_response_time '
        '%$http_x_spacer_trace_id/$http_x_spacer_parent_span_id/$http_x_spacer_span_id% '
        '["$http_referer" "$http_user_agent" $remote_addr $remote_user] ';
    access_log /dev/stdout trace_log;
    access_log logs/access.log trace_log;
    log_subrequest on;

    resolver 8.8.8.8 114.114.114.114 valid=3600s ipv6=off;

    # lua_package_path and lua_package_cpath will only apply to "require" function within Lua scripts
    lua_package_path "$prefix/app/?.lua;$prefix/lib/?.lua;;";
    lua_package_cpath "$prefix/app/?.so;$prefix/lib/?.so;;";

    server {
        error_page 404 /404.json;

        {{if .NoCodeCache -}}
        lua_code_cache off;
        {{end -}}

        listen {{.FunctionInvokerPort}};

        set_by_lua_file $func_name lib/log_func_name.lua;

        location = /404.json {
          internal;
          default_type application/json;
          return 404 '{ "error": "not found" }';
        }

        # just a proxy to append_log so we can generate the value trace
        location ~ ^/append_log_proxy/(.+) {
            internal;
            proxy_pass http://append_log_proxy;

            # rewrite_by_lua_file use a path relative to nginx's pwd
            rewrite_by_lua_file lib/trace.lua;
        }

        # can only invoke private functions from localhost
        location ~ ^/private/(.+) {
            allow 127.0.0.1;
            deny all;

            default_type application/json;
            rewrite_by_lua_file lib/trace.lua;
            content_by_lua_file lib/run.lua;
        }

        # handle everything else with router
        location ~ ^/(.+) {
            default_type application/json;
            rewrite_by_lua_file lib/trace.lua;
            content_by_lua_file lib/run.lua;
        }
    }

    scgi_temp_path temp/scgi_temp;
    client_body_temp_path temp/client_body_temp;
    fastcgi_temp_path temp/fastcgi_temp;
    proxy_temp_path temp/proxy_temp;
    uwsgi_temp_path temp/uwsgi_temp;
}
