// Code generated by go-bindata.
// sources:
// app/gateway.lua
// app/hello.lua
// app/spacer/log.lua
// app/spacer/router.lua
// app/spacer/run.lua
// app/spacer/service.lua
// app/spacer/trace.lua
// bin/start.sh
// bin/test.sh
// config/application.yml
// config/env.development.yml
// config/env.production.yml
// config/env.test.yml
// config/nginx.conf
// appignore
// hello.t.md
// DO NOT EDIT!

package spacer

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
)

// bindataRead reads the given file from disk. It returns an error on failure.
func bindataRead(path, name string) ([]byte, error) {
	buf, err := ioutil.ReadFile(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset %s at %s: %v", name, path, err)
	}
	return buf, err
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

// appGatewayLua reads file data from disk. It returns an error on failure.
func appGatewayLua() (*asset, error) {
	path := "/Users/poga/projects/go/src/github.com/poga/spacer/app/gateway.lua"
	name := "app/gateway.lua"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appHelloLua reads file data from disk. It returns an error on failure.
func appHelloLua() (*asset, error) {
	path := "/Users/poga/projects/go/src/github.com/poga/spacer/app/hello.lua"
	name := "app/hello.lua"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appSpacerLogLua reads file data from disk. It returns an error on failure.
func appSpacerLogLua() (*asset, error) {
	path := "/Users/poga/projects/go/src/github.com/poga/spacer/app/spacer/log.lua"
	name := "app/spacer/log.lua"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appSpacerRouterLua reads file data from disk. It returns an error on failure.
func appSpacerRouterLua() (*asset, error) {
	path := "/Users/poga/projects/go/src/github.com/poga/spacer/app/spacer/router.lua"
	name := "app/spacer/router.lua"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appSpacerRunLua reads file data from disk. It returns an error on failure.
func appSpacerRunLua() (*asset, error) {
	path := "/Users/poga/projects/go/src/github.com/poga/spacer/app/spacer/run.lua"
	name := "app/spacer/run.lua"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appSpacerServiceLua reads file data from disk. It returns an error on failure.
func appSpacerServiceLua() (*asset, error) {
	path := "/Users/poga/projects/go/src/github.com/poga/spacer/app/spacer/service.lua"
	name := "app/spacer/service.lua"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appSpacerTraceLua reads file data from disk. It returns an error on failure.
func appSpacerTraceLua() (*asset, error) {
	path := "/Users/poga/projects/go/src/github.com/poga/spacer/app/spacer/trace.lua"
	name := "app/spacer/trace.lua"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// binStartSh reads file data from disk. It returns an error on failure.
func binStartSh() (*asset, error) {
	path := "/Users/poga/projects/go/src/github.com/poga/spacer/bin/start.sh"
	name := "bin/start.sh"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// binTestSh reads file data from disk. It returns an error on failure.
func binTestSh() (*asset, error) {
	path := "/Users/poga/projects/go/src/github.com/poga/spacer/bin/test.sh"
	name := "bin/test.sh"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configApplicationYml reads file data from disk. It returns an error on failure.
func configApplicationYml() (*asset, error) {
	path := "/Users/poga/projects/go/src/github.com/poga/spacer/config/application.yml"
	name := "config/application.yml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configEnvDevelopmentYml reads file data from disk. It returns an error on failure.
func configEnvDevelopmentYml() (*asset, error) {
	path := "/Users/poga/projects/go/src/github.com/poga/spacer/config/env.development.yml"
	name := "config/env.development.yml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configEnvProductionYml reads file data from disk. It returns an error on failure.
func configEnvProductionYml() (*asset, error) {
	path := "/Users/poga/projects/go/src/github.com/poga/spacer/config/env.production.yml"
	name := "config/env.production.yml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configEnvTestYml reads file data from disk. It returns an error on failure.
func configEnvTestYml() (*asset, error) {
	path := "/Users/poga/projects/go/src/github.com/poga/spacer/config/env.test.yml"
	name := "config/env.test.yml"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// configNginxConf reads file data from disk. It returns an error on failure.
func configNginxConf() (*asset, error) {
	path := "/Users/poga/projects/go/src/github.com/poga/spacer/config/nginx.conf"
	name := "config/nginx.conf"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// appignore reads file data from disk. It returns an error on failure.
func appignore() (*asset, error) {
	path := "/Users/poga/projects/go/src/github.com/poga/spacer/appignore"
	name := "appignore"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// helloTMd reads file data from disk. It returns an error on failure.
func helloTMd() (*asset, error) {
	path := "/Users/poga/projects/go/src/github.com/poga/spacer/hello.t.md"
	name := "hello.t.md"
	bytes, err := bindataRead(path, name)
	if err != nil {
		return nil, err
	}

	fi, err := os.Stat(path)
	if err != nil {
		err = fmt.Errorf("Error reading asset info %s at %s: %v", name, path, err)
	}

	a := &asset{bytes: bytes, info: fi}
	return a, err
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"app/gateway.lua": appGatewayLua,
	"app/hello.lua": appHelloLua,
	"app/spacer/log.lua": appSpacerLogLua,
	"app/spacer/router.lua": appSpacerRouterLua,
	"app/spacer/run.lua": appSpacerRunLua,
	"app/spacer/service.lua": appSpacerServiceLua,
	"app/spacer/trace.lua": appSpacerTraceLua,
	"bin/start.sh": binStartSh,
	"bin/test.sh": binTestSh,
	"config/application.yml": configApplicationYml,
	"config/env.development.yml": configEnvDevelopmentYml,
	"config/env.production.yml": configEnvProductionYml,
	"config/env.test.yml": configEnvTestYml,
	"config/nginx.conf": configNginxConf,
	"appignore": appignore,
	"hello.t.md": helloTMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"app": &bintree{nil, map[string]*bintree{
		"gateway.lua": &bintree{appGatewayLua, map[string]*bintree{}},
		"hello.lua": &bintree{appHelloLua, map[string]*bintree{}},
		"spacer": &bintree{nil, map[string]*bintree{
			"log.lua": &bintree{appSpacerLogLua, map[string]*bintree{}},
			"router.lua": &bintree{appSpacerRouterLua, map[string]*bintree{}},
			"run.lua": &bintree{appSpacerRunLua, map[string]*bintree{}},
			"service.lua": &bintree{appSpacerServiceLua, map[string]*bintree{}},
			"trace.lua": &bintree{appSpacerTraceLua, map[string]*bintree{}},
		}},
	}},
	"appignore": &bintree{appignore, map[string]*bintree{}},
	"bin": &bintree{nil, map[string]*bintree{
		"start.sh": &bintree{binStartSh, map[string]*bintree{}},
		"test.sh": &bintree{binTestSh, map[string]*bintree{}},
	}},
	"config": &bintree{nil, map[string]*bintree{
		"application.yml": &bintree{configApplicationYml, map[string]*bintree{}},
		"env.development.yml": &bintree{configEnvDevelopmentYml, map[string]*bintree{}},
		"env.production.yml": &bintree{configEnvProductionYml, map[string]*bintree{}},
		"env.test.yml": &bintree{configEnvTestYml, map[string]*bintree{}},
		"nginx.conf": &bintree{configNginxConf, map[string]*bintree{}},
	}},
	"hello.t.md": &bintree{helloTMd, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

