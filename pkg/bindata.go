// Code generated by go-bindata.
// sources:
// nginx/nginx.conf
// nginx/spacer/log.lua
// nginx/spacer/run.lua
// nginx/spacer/service.lua
// nginx/spacer/trace.lua
// DO NOT EDIT!

package spacer

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _nginxNginxConf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4d\x6f\xdb\x38\x10\xbd\xeb\x57\x0c\x1c\x01\xde\xc5\x22\xb6\x9c\xcd\x1a\x9b\xa8\x41\x4f\x3d\xb6\xbd\xf4\x16\xa4\x04\x4d\x8d\x6d\x36\x14\xc9\xce\x90\xfe\x68\xe1\xfe\xf6\x82\x94\x1c\xcb\x49\x8a\x96\x86\x6d\x70\xe6\xf1\xcd\xf0\xf1\xcd\xd6\xd1\x23\x92\xf0\xe4\x14\x32\x23\xc3\xac\x2e\x90\xc8\x91\x30\x6e\x05\xc6\xad\x78\x9a\xb7\x13\xe3\x56\x75\xd1\x48\x6c\x9d\x05\xb7\x5c\xd6\x45\x81\x1b\xb4\x81\xe1\x7b\x01\x00\xd0\xf3\x28\x67\x2d\xaa\xa0\x9d\x65\x98\x55\x57\xd7\x75\x71\x28\x8a\x75\x08\xbe\x87\x45\xcf\x81\x50\xb6\x20\xbd\x47\xdb\xa4\x22\xa9\xf6\x6e\xdf\xe7\xd3\x62\xa4\x0d\x12\x18\xa7\xa4\x59\x3b\x0e\xb7\x37\xd5\xfc\xbf\x3a\xa7\x0f\x45\xfe\x53\x46\xa3\x0d\xa2\x95\x3b\xb1\x70\xcd\x5e\xb0\xfe\x86\x70\x55\xbd\xaf\xbb\xf4\x05\xc4\xa0\x4d\x8a\xd9\x95\xb6\x3b\x58\x44\x6d\xc2\xa5\xb6\x40\xf8\x35\x22\x07\x08\xba\x45\x50\xd2\xa8\x68\x64\xea\xf5\x78\x8a\xfb\x13\x63\x06\x25\xd5\x1a\x9b\x8c\xe4\x20\x5b\x0f\xec\xc0\x3a\xe0\x3d\x2b\x69\x4c\x66\xd2\x84\x4d\x7f\xf2\xc3\xc7\x4f\xef\x6e\x81\xd7\x6e\xcb\x50\x4d\x2a\xd0\xcb\x63\x2d\x91\x6b\xbd\x81\x59\xcb\x19\x9b\x2e\xbc\x74\xd4\xca\x00\x81\xa4\xc2\x2c\xf3\xb8\x24\x6c\x5d\x40\x21\x9b\x86\xe0\x12\x8e\xdb\xc8\x48\x70\x5f\x26\x0a\x91\xe5\x78\x80\xfb\xb2\x65\x54\x0f\x30\x7e\x92\x6b\x3c\x2a\xfb\x5a\x23\x28\x39\xc8\x10\x19\xca\x2c\xcb\x62\x1f\x90\x05\xa3\x0d\xe7\xf0\xf4\x1e\x82\x70\x89\x84\x34\x82\x7e\x9f\x6a\x09\xb9\x42\x1b\x46\x43\x74\x19\x49\x43\x87\xd8\x09\xf6\x52\x21\x89\xae\x71\xdd\x3c\x8f\xb3\x97\xf6\x95\xb0\x97\x94\x5e\xeb\x98\x1d\x92\x9f\x89\x54\x1e\xcd\x21\x08\xd9\x3b\xcb\xd8\xc7\xbd\xf6\x38\xee\x0c\x20\x55\xb2\xe9\xc9\x9b\xdd\x3e\x99\xf3\x24\x67\xfd\x24\x34\xc7\xc5\xf1\xc9\x9d\xed\xcd\x41\xc8\xce\x24\x7f\xfd\x3f\xc9\x1f\x98\xcd\xae\x27\x83\x2f\x6c\xa4\xd1\xcd\xdd\xbf\xf3\xaa\x62\xd0\x7e\x33\xbf\xeb\xdc\x9e\x39\xa3\x14\x5e\xaa\x47\xb9\x42\xe1\x65\x58\xc3\xa8\xf4\x84\x4b\xbd\x9b\x76\x57\x9d\xbe\x9d\x98\x28\xeb\x63\x90\x90\xc3\x5e\xb4\xae\x89\x06\x79\x6a\xa2\x34\x7a\xd1\x43\xea\x51\xfd\x82\x51\xfd\x82\x92\xdd\xef\x18\xd9\x65\xc2\x62\x30\x3d\xa7\x71\x4a\x25\x94\x6b\x50\x64\x4b\xc3\xe9\x36\x39\xa9\x39\xa0\x85\x9b\x6a\x7e\x3d\x88\x5e\xc0\x97\xc8\x01\x24\x74\xa3\x19\xdc\x60\x5c\xd3\x20\x6c\xd3\xf4\x58\x58\xa1\x45\x92\x01\x21\xac\x31\xc9\x16\xb1\x7b\x84\x13\xbb\x53\x79\xbe\xe0\x07\x7c\x9e\x3e\x9f\xf8\xe9\x5f\x93\x7f\xfe\x1e\xf4\x99\x96\xb6\x01\xc9\x4a\x53\x9f\x45\x33\x5c\x78\xc9\x0c\xc9\x59\xb7\xd3\x17\x5c\xe7\x78\xc2\x2d\xe9\x80\x62\xb1\x17\xe9\xf2\x4b\x6d\xfa\xc6\xb2\xf4\x4f\xd0\x43\xf1\x7a\xa3\x2f\xfa\xfa\x43\x3e\x00\xe5\x6c\x48\x56\x1f\x02\x29\xda\xe7\x65\xbb\xdf\x43\xf1\x33\x00\x00\xff\xff\x97\xe4\x81\x19\x7c\x05\x00\x00")

func nginxNginxConfBytes() ([]byte, error) {
	return bindataRead(
		_nginxNginxConf,
		"nginx/nginx.conf",
	)
}

func nginxNginxConf() (*asset, error) {
	bytes, err := nginxNginxConfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nginx/nginx.conf", size: 1404, mode: os.FileMode(420), modTime: time.Unix(1514219500, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nginxSpacerLogLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\x41\x6e\xc3\x20\x10\x45\xf7\x73\x8a\xaf\x6c\xe2\x48\x0d\x39\x01\x47\xf0\x19\x10\xc1\xd3\x84\xca\x1a\xe8\x80\xa5\x44\x96\xef\x5e\x61\xea\x4a\x65\xc5\x1f\xbd\xf9\xf3\xe6\x14\xfc\x0c\x37\xc2\x62\xdd\xa8\xa7\xaf\x92\x04\x16\xca\xdf\x4b\x54\xc6\x29\xb4\xc1\x89\xe8\x7a\x05\x4b\xd5\xc8\x05\xb1\xc0\xe3\xe9\xcb\x13\xd5\xdf\x67\x26\x37\x1a\x9f\x33\xcb\x04\x8b\xcf\x45\x42\x8d\x49\x30\xd4\x94\x63\xf8\x38\x96\x2e\x04\x00\xfd\x84\x72\x81\x85\x3c\x5e\xa6\xe5\x46\x9b\xe0\x73\x5d\x94\x87\x9d\x6a\xef\x7c\xeb\x95\x6e\x4e\x0f\x97\x35\xbd\xde\xb7\x33\x8c\x41\x6f\xfd\xc3\x56\xdc\xd3\xf4\x86\xdd\xb5\x0d\x4b\x48\x13\x0f\xeb\x0e\xc1\xe2\xbf\x02\xec\xf1\xdb\x2e\xd8\xf6\x8a\x6e\xa5\x5c\x17\x95\xa6\x45\x2c\x13\xd1\x6f\x76\x23\xfd\x04\x00\x00\xff\xff\x38\xb4\x7a\xc7\x21\x01\x00\x00")

func nginxSpacerLogLuaBytes() ([]byte, error) {
	return bindataRead(
		_nginxSpacerLogLua,
		"nginx/spacer/log.lua",
	)
}

func nginxSpacerLogLua() (*asset, error) {
	bytes, err := nginxSpacerLogLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nginx/spacer/log.lua", size: 289, mode: os.FileMode(420), modTime: time.Unix(1514219489, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nginxSpacerRunLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x41\x6b\xdb\x4c\x10\xbd\xef\xaf\x18\xf6\xf2\xad\x40\x5a\xc2\x07\xbd\x14\x74\x08\xa9\x4f\x85\xba\xb8\x3e\x14\x42\x30\x1b\xed\xd8\x56\x2d\x66\x9d\xdd\x55\xea\x60\xfc\xdf\xcb\x8c\x64\xa5\x8e\x03\xcd\xc5\xb6\x66\xe6\xbd\x79\x6f\x9e\xdc\x85\xc6\x75\xf0\x2b\x05\x82\x1a\x22\x3e\xf5\x6d\x44\xd0\x0d\x17\xb4\x52\xb4\x39\xd8\x88\x4f\x36\xa2\xf3\xab\xc7\xe0\x5f\x4c\xa1\x54\x55\xc1\x72\xfe\x65\xfe\x19\x28\x64\x48\x6e\x8d\xe0\x32\xb8\xae\x53\x03\xd7\xde\xe5\x2d\xd4\xc0\xd0\x67\x17\x6d\x1f\xdb\xb1\x11\x76\x25\xac\x7b\x6a\xa0\x86\x7d\xe3\xba\xce\x8c\xeb\x4a\x81\x0c\xc4\x8c\xea\xc2\xc6\xf0\xf7\x6c\xb1\x28\x41\xc7\x9e\xa8\xa5\x0d\x68\xb0\x76\xe0\xb6\x16\x34\x68\x28\x65\xb8\x4d\xab\xd4\x3f\x32\x13\xa6\x5c\x72\x63\xa8\xb3\xea\x0d\xe6\xd5\x16\x9d\xc7\x98\x4c\x71\xaf\x7f\x56\x3f\xbe\xdf\xde\xcd\x16\xd5\x72\x71\x7b\x37\xab\x96\xf3\xaf\xb3\x6f\xfa\xa1\x50\xaa\x5d\x8b\x95\xb0\x83\xbc\x45\x52\x00\x70\xad\x23\x62\x2a\xa4\x13\x31\xf7\x91\x64\x00\x0f\x6d\x36\x9f\x6e\x6e\x0a\x85\xe4\xd5\xe8\x92\xaf\x34\xda\x3f\x6b\xe0\xd2\xca\xbb\xec\x4c\x31\x0e\xe1\x33\x52\x86\x1a\x8e\x27\x5e\x2e\x90\x69\xb5\xf4\xec\x48\xc3\x39\x58\x8f\x4d\xf0\x68\xb8\x74\xb1\xaa\x09\x94\xf1\x30\xf2\x28\x3e\x6d\x6e\x03\x9d\xcb\x16\x63\x0c\x11\x0c\xc6\x38\x28\x97\x67\x73\xe4\x79\x2d\xbf\x75\xc9\x35\xa8\xf9\xf3\x34\x32\x5f\xb1\xac\x5d\x76\xdd\x15\x8b\x3c\xfe\x25\x85\xb3\x8d\x98\xa7\x68\x99\xa6\x1c\xac\x94\x67\xaa\xf7\x2f\xdd\xae\x19\x68\x33\xd4\x93\x2c\x69\x42\x55\x41\x9f\x30\x0e\x0b\x65\xf4\x1c\x4c\x72\x2f\x46\x0e\x83\x24\x87\x39\xde\x8f\xc0\x07\x79\x87\xc5\xf9\xa9\x28\x2e\x30\x6f\xc2\x94\x99\xd7\x89\xb7\xa1\xfe\xcf\xa1\x8a\xdb\x2e\xa1\x28\xa1\x1d\x85\xdf\x04\x78\x68\x70\xcf\xf7\x99\xa0\xd3\xbf\xc1\x07\xfa\x2f\x9f\x99\xa6\x39\x68\x09\xf6\x31\xf8\xbe\xb9\x40\x7d\xc4\xc6\xbf\x2c\x7c\x44\x3e\xf9\x21\xa5\x77\xf7\xf1\x2b\xf9\xba\xea\x4f\x00\x00\x00\xff\xff\x50\xc8\x5f\x92\x0a\x04\x00\x00")

func nginxSpacerRunLuaBytes() ([]byte, error) {
	return bindataRead(
		_nginxSpacerRunLua,
		"nginx/spacer/run.lua",
	)
}

func nginxSpacerRunLua() (*asset, error) {
	bytes, err := nginxSpacerRunLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nginx/spacer/run.lua", size: 1034, mode: os.FileMode(420), modTime: time.Unix(1514219489, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nginxSpacerServiceLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x24\xcb\x41\x0a\x02\x31\x0c\x46\xe1\x7d\x4e\xf1\xef\x66\x06\x24\x9e\xa0\x47\xe8\x19\x4a\x6d\xa3\x08\x35\x95\x34\x05\x45\xbc\xbb\x14\x97\x0f\xde\xd7\x7a\xc9\x0d\x29\x22\xe0\xf3\x25\x4a\x91\x87\x38\x02\xae\x53\x8b\xdf\xbb\x62\xd7\xfc\x90\x13\x2e\xbd\xbe\x0f\x02\x80\xbf\x30\x19\x08\xd0\xdb\x8b\x57\xaf\x93\x4b\x7e\xfa\x34\xd9\xb7\xf3\x06\x66\x2c\x77\x90\x68\x25\x32\xf1\x69\x8a\x14\xe9\x17\x00\x00\xff\xff\x0b\xfb\x3a\xad\x6f\x00\x00\x00")

func nginxSpacerServiceLuaBytes() ([]byte, error) {
	return bindataRead(
		_nginxSpacerServiceLua,
		"nginx/spacer/service.lua",
	)
}

func nginxSpacerServiceLua() (*asset, error) {
	bytes, err := nginxSpacerServiceLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nginx/spacer/service.lua", size: 111, mode: os.FileMode(420), modTime: time.Unix(1514219489, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nginxSpacerTraceLua = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x90\xc1\x6e\xea\x30\x14\x44\xf7\xf9\x8a\xd9\xe5\x3d\x09\xf3\x07\x2c\x22\x82\xd4\x6c\x50\x04\x91\xca\xce\xba\xc5\x17\x62\x29\xbd\x2e\xb6\x03\xe5\xef\x2b\x83\x92\x50\x15\xb1\x4c\x6c\xcf\x99\x33\x4a\xe1\xc8\xc2\x9e\x22\x23\x7a\xda\x33\xaa\x12\xf6\x80\xd8\xb2\xe7\x3c\x40\x9c\x70\xa6\xd4\xfd\x4c\x59\x83\xc5\x02\xde\xb9\xa8\xc2\x17\x89\xb2\x26\xb3\x07\x88\x8b\x90\xe3\xf7\xfc\x4c\x7e\xfe\xd6\x34\xb5\xde\xe9\x6d\x5d\x2c\x57\x1b\xdd\x6c\x8a\xe5\x4a\x57\x65\x8a\x93\x0c\x00\x94\x42\x1f\x18\x9e\x4f\x3d\x87\xa8\xad\x41\x70\xb8\x30\x8c\x93\x3c\xa2\xa5\x33\x23\xba\xa9\x52\x2f\xf6\xd4\x33\xac\xc1\xc7\x15\xae\xf7\x81\xbb\xc3\x2d\x27\xf1\x3c\x9f\xe6\x81\xa3\x6e\x99\x0c\xfb\x7f\xf9\x4e\xdd\xb1\xea\x86\x55\x55\x99\xcf\xc6\x5e\x13\xf0\x7f\xc6\x62\xb2\xe4\xf4\xce\x20\xcf\x20\xec\x5b\xdb\x19\x24\xa3\x47\x75\xea\x3c\x93\xb9\x82\xb0\xad\x8b\xb5\xae\xca\xf4\xc6\x0a\x62\x6b\x03\xf6\x14\x78\x86\x4f\x97\xfa\xb6\x0c\xe7\xed\xd1\x0a\x75\xc3\xd5\x24\x51\x17\x9b\xd5\xba\xd1\xc3\x1f\x12\x33\x79\x11\x84\x2f\x63\x6e\xda\xf0\xe9\x7e\x63\xda\x30\xdf\x4b\xed\x3b\x30\x7d\xad\x7f\xcb\x3f\x0d\x9d\x76\x18\x5b\x0d\x7d\x5e\x52\xfe\xc6\x3f\x6e\xfb\x13\x00\x00\xff\xff\x3a\x15\x00\x68\x50\x02\x00\x00")

func nginxSpacerTraceLuaBytes() ([]byte, error) {
	return bindataRead(
		_nginxSpacerTraceLua,
		"nginx/spacer/trace.lua",
	)
}

func nginxSpacerTraceLua() (*asset, error) {
	bytes, err := nginxSpacerTraceLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "nginx/spacer/trace.lua", size: 592, mode: os.FileMode(420), modTime: time.Unix(1514219489, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"nginx/nginx.conf": nginxNginxConf,
	"nginx/spacer/log.lua": nginxSpacerLogLua,
	"nginx/spacer/run.lua": nginxSpacerRunLua,
	"nginx/spacer/service.lua": nginxSpacerServiceLua,
	"nginx/spacer/trace.lua": nginxSpacerTraceLua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"nginx": &bintree{nil, map[string]*bintree{
		"nginx.conf": &bintree{nginxNginxConf, map[string]*bintree{}},
		"spacer": &bintree{nil, map[string]*bintree{
			"log.lua": &bintree{nginxSpacerLogLua, map[string]*bintree{}},
			"run.lua": &bintree{nginxSpacerRunLua, map[string]*bintree{}},
			"service.lua": &bintree{nginxSpacerServiceLua, map[string]*bintree{}},
			"trace.lua": &bintree{nginxSpacerTraceLua, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

